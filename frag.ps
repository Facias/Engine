#version 400 core
layout(location = 0) out vec4 color;

uniform vec4 vcolor;
in vec3 posVarying;
in vec2 uvVarying;
in vec3 normalVarying;
in vec3 lightVarying;

flat in vec3 normalFlat;
in mat3 TBN;

uniform vec2 tile;
uniform vec4 GI; // x = useGI, w = sampleGI

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture14;
uniform sampler2D texture15;

uniform vec4 samples;
uniform float time;
uniform float reflectHeight;
uniform vec3 campos;

in vec4 transformLight0;
in vec4 transformLight1;
in vec4 transformLight2;
in vec4 transformLight3;

uniform vec3 cascadeCenter0;
uniform vec3 cascadeCenter1;
uniform vec3 cascadeCenter2;
uniform vec3 cascadeCenter3;


uniform float shadowMapSize;

highp float snoise(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureCubic(sampler2D sampler, vec2 texCoords)
{

   vec2 texSize = textureSize(sampler, 0);
   vec2 invTexSize = 1.0 / texSize;
   
   texCoords = texCoords * texSize - 0.5;

   
    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;
    
    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;
    
    offset *= invTexSize.xxyy;
    
    vec4 sample0 = texture2D(sampler, offset.xz);
    vec4 sample1 = texture2D(sampler, offset.yz);
    vec4 sample2 = texture2D(sampler, offset.xw);
    vec4 sample3 = texture2D(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);
}

float shadowSample(highp vec2 uv, int cascade)
{



	
	float ortho = abs( dot(vec3(.577), normalFlat));
	
	// fix the modulus gap between texels
	float mod_offset = 1.0/512.0;


	if (cascade == 0)
	{
		float shadow[36];
		for (int n = 0; n< 36; n++)
			shadow[n] = 1.0;


		highp float acompare = (transformLight0.z + transformLight0.w)/2.0;
		

		highp vec4 val[9];
		highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
	
		for (int m = 0; m<3; m++)
		{
			for (int n = 0; n<3; n++)
			{
				val[n] = textureGather(texture15, uv+vec2(-1.5+2.0*n,-1.5+2.0*m)*duv, 0);
				if (val[n].x < acompare) shadow[2*n+12*m] = 0.0;
				if (val[n].y < acompare) shadow[2*n+1+12*m] = 0.0;
				if (val[n].w < acompare) shadow[2*n+6+12*m] = 0.0;
				if (val[n].z < acompare) shadow[2*n+7+12*m] = 0.0;
			}
		}

		highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
		if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+mod_offset)) ) frac.x = 0.0;
		if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+mod_offset)) ) frac.y = 0.0;
		

		float ave[25];
		float y0, y1;
		
		for (int m = 0; m <5; m++)
		{
			for (int n = 0 ; n <5; n++)
			{
				y0 = mix( shadow[n+6+6*m], shadow[n+6*m], frac.y);
				y1 = mix( shadow[n+7+6*m], shadow[n+1+6*m], frac.y);
				ave[n+5*m] = mix(y0, y1, frac.x);
			}
		}
		
		float weight[3];
		weight[0] = 0.56888889;
		weight[1] = 0.47862867;
		weight[2] = 0.23692689;

		 
		float sum = 0;
		for (int w = -2; w<3; w++)
			for (int h = -2; h<3; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+2)+5*(h+2)];
		
		sum /= 4.0;
		

		return sum;//ave[12];
	}
	/*
	if (cascade == 1)
	{
		float shadow[36];
		for (int n = 0; n< 36; n++)
			shadow[n] = 1.0;
			
		
		highp float compare = (transformLight1.z + transformLight1.w)/2.0;
		float bias = .0001;	
		bias += .1*ortho*ortho;
		
		
		
		highp vec4 val[9];
		highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
		
		float acompare = compare -bias;
		
		for (int m = 0; m<3; m++)
		{
			for (int n = 0; n<3; n++)
			{			
				val[n+3*m] = textureGather(texture15, uv+vec2(-1.5+2.0*n,-1.5+2.0*m)*duv, 0);
				if (val[n+3*m].x < acompare) shadow[2*n+12*m] = 0.0;
				if (val[n+3*m].y < acompare) shadow[2*n+1+12*m] = 0.0;
				if (val[n+3*m].w < acompare) shadow[2*n+6+12*m] = 0.0;
				if (val[n+3*m].z < acompare) shadow[2*n+7+12*m] = 0.0;
			}
		}


		highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
		if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+1.0/512.0)) ) frac.y = 0.0;
		
		float ave[25];
		float y0, y1;
		
		for (int m = 0; m<5; m++)
		{
			for (int n = 0 ; n <5; n++)
			{
				y0 = mix( shadow[n+6+6*m], shadow[n+6*m], frac.y);
				y1 = mix( shadow[n+7+6*m], shadow[n+1+6*m], frac.y);
				ave[n+5*m] = mix(y0, y1, frac.x);
			}
		}

		float weight[3];
		weight[0] = 0.56888889;
		weight[1] = 0.47862867;
		weight[2] = 0.23692689;

		 
		float sum = 0;
		for (int w = -2; w<3; w++)
			for (int h = -2; h<3; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+2)+5*(h+2)];
		
		sum /= 4.0;
		return sum;//ave[12];
	}
	*/
	
	if (cascade == 1)
	{
		float shadow[16];
		for (int n = 0; n< 16; n++)
			shadow[n] = 1.0;
			
		//float bias = .00015*ortho*ortho;
		highp float acompare = (transformLight1.z + transformLight1.w)/2.0;

		highp vec4 val[4];
		highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
		
		for (int m = 0; m<2; m++)
		{
			for (int n = 0; n<2; n++)
			{
				val[n+2*m] = textureGather(texture15, uv+vec2(-.5+2.0*n,-.5+2.0*m)*duv, 0);
				if (val[n+2*m].x < acompare) shadow[2*n+8*m] = 0.0;
				if (val[n+2*m].y < acompare) shadow[2*n+1+8*m] = 0.0;
				if (val[n+2*m].w < acompare) shadow[2*n+4+8*m] = 0.0;
				if (val[n+2*m].z < acompare) shadow[2*n+5+8*m] = 0.0;
			}
		}

		highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
		if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+mod_offset)) ) frac.x = 0.0;
		if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+mod_offset)) ) frac.y = 0.0;
		
		
		float ave[9];
		float y0, y1;
		
		for (int m = 0; m<3; m++)
		{
			for (int n = 0; n<3; n++)
			{
				y0 = mix( shadow[n+4+4*m], shadow[n+4*m], frac.y);
				y1 = mix( shadow[n+5+4*m], shadow[n+1+4*m], frac.y);
				ave[n+3*m] = mix(y0, y1, frac.x);
			}
		}
		
		float weight[2];
		weight[0] = 0.8888889;
		weight[1] = 0.5555556;

		float sum = 0;
		for (int w = -1; w<2; w++)
			for (int h = -1; h<2; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+1)+3*(h+1)];
		
		sum /= 4.0;

		
		return sum;
	}
		
	if (cascade == 2)
	{
		float shadow[16];
		for (int n = 0; n< 16; n++)
			shadow[n] = 1.0;

		highp float acompare = (transformLight2.z + transformLight2.w)/2.0;

		highp vec4 val[4];
		highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
		
		for (int m = 0; m<2; m++)
		{
			for (int n = 0; n<2; n++)
			{
				val[n+2*m] = textureGather(texture15, uv+vec2(-.5+2.0*n,-.5+2.0*m)*duv, 0);

				if (val[n+2*m].x < acompare) shadow[2*n+8*m] = 0.0;
				if (val[n+2*m].y < acompare) shadow[2*n+1+8*m] = 0.0;
				if (val[n+2*m].w < acompare) shadow[2*n+4+8*m] = 0.0;
				if (val[n+2*m].z < acompare) shadow[2*n+5+8*m] = 0.0;
			}
		}

		highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
		if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+1.0/512.0)) ) frac.y = 0.0;

		float ave[9];
		float y0, y1;
		
		 y0 = mix( shadow[4], shadow[0], frac.y);
		 y1 = mix( shadow[5], shadow[1], frac.y);
		 ave[0] = mix(y0, y1, frac.x);
		
		 y0 = mix( shadow[5], shadow[1], frac.y);
		 y1 = mix( shadow[6], shadow[2], frac.y);
		 ave[1] = mix(y0, y1, frac.x);
		 
		 y0 = mix( shadow[6], shadow[2], frac.y);
		 y1 = mix( shadow[7], shadow[3], frac.y);
		 ave[2] = mix(y0, y1, frac.x);
		 
		 // second row
		 y0 = mix( shadow[8], shadow[4], frac.y);
		 y1 = mix( shadow[9], shadow[5], frac.y);
		 ave[3] = mix(y0, y1, frac.x);
		 
		 y0 = mix( shadow[9], shadow[5], frac.y);
		 y1 = mix( shadow[10], shadow[6], frac.y);
		 ave[4] = mix(y0, y1, frac.x);
		 
		 y0 = mix( shadow[10], shadow[6], frac.y);
		 y1 = mix( shadow[11], shadow[7], frac.y);
		 ave[5] = mix(y0, y1, frac.x);
		 
		 // third row
		 y0 = mix( shadow[12], shadow[8], frac.y);
		 y1 = mix( shadow[13], shadow[9], frac.y);
		 ave[6] = mix(y0, y1, frac.x);
		 
		 y0 = mix( shadow[13], shadow[9], frac.y);
		 y1 = mix( shadow[14], shadow[10], frac.y);
		 ave[7] = mix(y0, y1, frac.x);
		 
		 y0 = mix( shadow[14], shadow[10], frac.y);
		 y1 = mix( shadow[15], shadow[11], frac.y);
		 ave[8] = mix(y0, y1, frac.x);
		 
		
		
		float weight[2];
		weight[0] = 0.8888889;
		weight[1] = 0.5555556;


		 
		float sum = 0;
		for (int w = -1; w<2; w++)
			for (int h = -1; h<2; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+1)+3*(h+1)];
		
		sum /= 4.0;
		
		//sum = shadow[15];
		return sum;
	}
	
	if (cascade == 3)
	{
		float shadow[4];
		for (int n = 0; n< 4; n++)
			shadow[n] = 1.0;
			
		highp float compare = (transformLight3.z + transformLight3.w)/2.0;
		float bias = .0003;	
		
		vec2 ddepth = (texture2D(texture14, uv).xy-.5)/(50.0f);
		ddepth = max(vec2(-.00015), min(ddepth,.00015));
			
		highp vec4 val[1];
		highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
		val[0] = textureGather(texture15, uv+vec2(.5,.5)*duv, 0);
		
		float acompare = compare -bias-4*abs(ddepth.x)-4*abs(ddepth.y);
		if (val[0].x < acompare) shadow[0] = 0.0;
		if (val[0].y < acompare) shadow[1] = 0.0;
		if (val[0].w < acompare) shadow[2] = 0.0;
		if (val[0].z < acompare) shadow[3] = 0.0;

		highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
		if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+mod_offset)) ) frac.x = 0.0;
		if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+mod_offset)) ) frac.y = 0.0;
		
		float ave;
		float y0, y1;
		
		 y0 = mix( shadow[2], shadow[0], frac.y);
		 y1 = mix( shadow[3], shadow[1], frac.y);
		 ave = mix(y0, y1, frac.x);
		
		return ave;
	}
}


float shadowSampleRaw(highp vec2 uv, int cascade)
{
	// fix the modulus gap between texels
	float mod_offset = 1.0/512.0;
	highp float compare;
	
	if (cascade == 0) compare = (transformLight0.z + transformLight0.w)/2.0;
	if (cascade == 1) compare = (transformLight1.z + transformLight1.w)/2.0;
	if (cascade == 2) compare = (transformLight2.z + transformLight2.w)/2.0;
	if (cascade == 3) compare = (transformLight3.z + transformLight3.w)/2.0;


	float shadow[4];
	for (int n = 0; n< 4; n++)
		shadow[n] = 1.0;
		
	
	float bias = .0003;	
	
	vec2 ddepth = (texture2D(texture14, uv).xy-.5)/(50.0f);
	ddepth = max(vec2(-.00015), min(ddepth,.00015));
		
	highp vec4 val;
	highp vec2 duv = 1.0/vec2(4*shadowMapSize,-shadowMapSize);
	val = textureGather(texture15, uv+vec2(.5,.5)*duv, 0);
	
	float acompare = compare -bias-4*abs(ddepth.x)-4*abs(ddepth.y);
	if (val.x < acompare) shadow[0] = 0.0;
	if (val.y < acompare) shadow[1] = 0.0;
	if (val.w < acompare) shadow[2] = 0.0;
	if (val.z < acompare) shadow[3] = 0.0;

	highp vec2 frac = uv*vec2(4*shadowMapSize,shadowMapSize) - floor(uv*vec2(4*shadowMapSize,shadowMapSize));
	if ( int(floor(uv.x*4*shadowMapSize)) < int(floor(uv.x*4*shadowMapSize+mod_offset)) ) frac.x = 0.0;
	if ( int(floor(uv.y*shadowMapSize)) < int(floor(uv.y*shadowMapSize+mod_offset)) ) frac.y = 0.0;
	
	float ave;
	float y0, y1;
	
	 y0 = mix( shadow[2], shadow[0], frac.y);
	 y1 = mix( shadow[3], shadow[1], frac.y);
	 ave = mix(y0, y1, frac.x);
	
	return ave;

}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    float height =  texture(texture2, texCoords).r; 
	float height_scale = 1.0;
    vec2 p = viewDir.xy / viewDir.z * (height * height_scale);
    return texCoords - p;    
} 

float volumeFog(float fogHeight)
{
	float fog = 0.0;
	float fog_density = .01;
	float fog_falloff = .001;
	if (campos.y < fogHeight)
	{
		if (posVarying.y > fogHeight)
		{
			float h = abs(campos.y-fogHeight);
			float angle = dot(normalize(posVarying-campos), vec3(0,1,0));
			float dist = min(length(campos-posVarying),h/angle);
			float dir_y = normalize(posVarying-campos).y;
			fog = max(0, min(1.0,(fog_density*dist-fog_falloff*dir_y*dist)+(fog_density-fog_falloff*campos.y)));
		}
		else
		{
			float dist = length(campos-posVarying);
			float dir_y = normalize(posVarying-campos).y;
			fog = max(0, min(1.0,(fog_density*dist-fog_falloff*dir_y*dist)+(fog_density-fog_falloff*campos.y)));
		}
	}
	else
	{
		if (posVarying.y < fogHeight)
		{
			float h = abs(campos.y-fogHeight);
			float angle = dot(normalize(posVarying-campos), vec3(0,-1,0));
			float dist = length(campos-posVarying)-h/angle;
			float dir_y = normalize(posVarying-campos).y;
			fog = max(0, min(1.0,(fog_density*dist-fog_falloff*dir_y*dist)));
		}
	}
	return fog;
}

void main()
{
	
	if (posVarying.y < reflectHeight-.1) discard;
	
	vec2 screen = gl_FragCoord.xy;
	float shadow = 1.0;
	
	highp float dmap = 1.0;
	float dist0 = length(posVarying-cascadeCenter0);
	
	
	
	if (dist0<10.0)
	{
		if (int(GI.w) == 0)
		{
			shadow = shadowSample(.5*(1+transformLight0.xy)/vec2(4,1), 0);
			float camdist = length(posVarying-campos);

			if (dist0 >8.0 && camdist>4.0)
			{
				float shadow1 = shadowSample(.5*(1+transformLight1.xy)/vec2(4,1)+vec2(.25,0), 1);
				shadow = mix(shadow, shadow1, .5*(dist0-8.0));
			}
		}
		else
			shadow = shadowSampleRaw(.5*(1+transformLight0.xy)/vec2(4,1), 0);

	}
	else	
	{
		float dist1 = length(posVarying-cascadeCenter1);
		
		if (dist1< 50.0 )
		{
			if (int(GI.w) == 0)
			{
				shadow = shadowSample(.5*(1+transformLight1.xy)/vec2(4,1)+vec2(.25,0), 1);
				
				if (dist1 > 45.0 )
				{
					float shadow1 = shadowSample(.5*(1+transformLight2.xy)/vec2(4,1)+vec2(.5,0), 2);
					shadow = mix(shadow, shadow1, .2*(dist1-45.0));
				}
			}
			else
				shadow = shadowSampleRaw(.5*(1+transformLight1.xy)/vec2(4,1)+vec2(.25,0), 1);

		}
		else
		{
			float dist2 = length(posVarying-cascadeCenter2);
			
			if (dist2 < 200.0 )
			{
				if (int(GI.w) == 0)
				{
					shadow = shadowSample(.5*(1+transformLight2.xy)/vec2(4,1)+vec2(.5,0), 2);
				}
				else
					shadow = shadowSampleRaw(.5*(1+transformLight2.xy)/vec2(4,1)+vec2(.5,0), 2);
			}	
			else
			{
				float dist3 = length(posVarying-cascadeCenter3);
				if (dist3 <450.0 )
				{
					shadow = shadowSample(.5*(1+transformLight3.xy)/vec2(4,1)+vec2(.75,0), 3);	
				}
			}
		}	
	}
	
	vec3 bump;
	//if ( textureQueryLod(texture2, uvVarying*20).x >0.0)
	//	bump = TBN*(2*texture2D(texture2, uvVarying*20).xyz-1);	
	//else
		bump = TBN*(2*textureCubic(texture2, uvVarying*20).xyz-1);

	float direct = max(0,dot(bump, normalize(vec3(1,1,1))));
	
	// direct = max(0,dot(normalVarying, normalize(vec3(1,1,1))));
	
	float indirectBump =  dot(bump, normalize(-posVarying+campos+1));
	
	
	
	vec4 tex = texture2D(texture0, uvVarying*tile.xy*vec2(1,-1)+vec2(0,1));
	
	vec4 light = texture2D(texture1, uvVarying*vec2(1,-1)+vec2(0,1));
	
	if (direct <= 0.0 || shadow <= 0.0) 
	{
		direct = 0;
		shadow = 0;	
	}
	else
	{
		direct *= shadow;
	}
	
	 //light += .1*indirectBump;
	
	vec3 tnoise = vec3(0);
	tnoise.r = snoise((uvVarying+gl_FragCoord.xy+.01*time)+vec2(1.7264,1.82))/128.0  ;
	tnoise.g = snoise((uvVarying+gl_FragCoord.xy+.01*time)+vec2(2.3456,2.7536))/128.0  ;
	tnoise.b = snoise((uvVarying+gl_FragCoord.xy+.01*time)+vec2(1.5673,2.1245))/128.0  ;
	
	color.rgb = vcolor.rgb*tex.rgb*(.3*light.rgb + .7 *direct )-tnoise;
	color.a = 1.0;
	float noise = snoise(uvVarying+gl_FragCoord.xy+.01*time)/(2*samples.x);
	color.a = floor((samples.x+1)*(tex.a+noise))/max(1.0,samples.x);

	
	vec3 ctop = normalize(campos-posVarying);
	vec3 bounce = normalize(reflect(-ctop, bump));
	float spec = dot(bounce, -normalize(posVarying-vec3(100000)));
	if (spec < 0) spec = 0;
	
	spec = pow(spec, 64.f);
	
	//vec2 dLight_dPos = vec2( dFdx(length(transformLight0.xy)), dFdy(length(transformLight0.xy)) );
	if (int(GI.x) == 1 && int(GI.y) == 0)
	{
		color = vec4(lightVarying, 1);
	}
	
	
	if (int(GI.w) == 1)
	{
		//backface occlusion
		if ( dot(normalize(campos- posVarying), TBN[2]) < 0) 
		{
			color = vec4(0,0,0,1);
			return;
		}
		
		color = vec4(vcolor.rgb*direct*vec3(1),1) ;
		return ;
	}
	//color = vec4(vcolor.rgb*(.5*light.rgb+.95*direct),1) - vec4(tnoise.rgb, 0);
	//color.rgb = mix(color.rgb, vec3(1,.5,0), volumeFog(20));
	
	//if (int(GI.x) == 1)
	{
		color = vec4(vcolor.rgb*(.5*lightVarying.rgb+.95*direct),1) - vec4(tnoise.rgb, 0);
		//color = vec4(lightVarying+shadow, 1);
	}


	//float du = abs(256*dFdx(length(uvVarying)));
	//float dv = abs(256*dFdy(length(uvVarying)));
	//color = vec4(lightVarying,1);
}

