#version 400 core
layout(location = 0) out vec4 color;

uniform vec4 vcolor;
in vec3 posVarying;
in vec2 uvVarying;
in vec3 normalVarying;
in vec3 lightVarying;
uniform vec2 tile;
uniform vec4 GI;

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture15;

uniform float samples;
uniform float time;
uniform vec3 campos;
uniform float reflectHeight;


in vec4 transformLight0;
in vec4 transformLight1;
in vec4 transformLight2;
in vec4 transformLight3;

uniform vec3 cascadeCenter0;
uniform vec3 cascadeCenter1;
uniform vec3 cascadeCenter2;
uniform vec3 cascadeCenter3;

 in float shadow;

float linstep(float low, float high, float v)
{
	return clamp((v-low)/(high-low),0.0,1.0);	
}
vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureCubic(sampler2D sampler, vec2 texCoords)
{

   vec2 texSize = textureSize(sampler, 0);
   vec2 invTexSize = 1.0 / texSize;
   
   texCoords = texCoords * texSize - 0.5;

   
    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;
    
    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;
    
    offset *= invTexSize.xxyy;
    
    vec4 sample0 = texture2D(sampler, offset.xz);
    vec4 sample1 = texture2D(sampler, offset.yz);
    vec4 sample2 = texture2D(sampler, offset.xw);
    vec4 sample3 = texture2D(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);
}

float shadowSample(highp vec2 uv, int cascade)
{
	if (cascade == 0)
	{
		float shadow[36];
		for (int n = 0; n< 36; n++)
			shadow[n] = 1.0;
			
		
		highp float compare = (transformLight0.z + transformLight0.w)/2.0;
		float bias = .0002;	
			
		highp vec4 val[9];
		highp vec2 duv = 1.0/vec2(4096,-1024);
		val[0] = textureGather(texture15, uv+vec2(-1.5,-1.5)*duv, 0);
		if (val[0].x < compare -bias) shadow[0] = 0.0;
		if (val[0].y < compare -bias) shadow[1] = 0.0;
		if (val[0].w < compare -bias) shadow[6] = 0.0;
		if (val[0].z < compare -bias) shadow[7] = 0.0;
		val[1] = textureGather(texture15, uv+vec2(.5,-1.5)*duv, 0);
		if (val[1].x < compare -bias) shadow[2] = 0.0;
		if (val[1].y < compare -bias) shadow[3] = 0.0;
		if (val[1].w < compare -bias) shadow[8] = 0.0;
		if (val[1].z < compare -bias) shadow[9] = 0.0;
		val[2] = textureGather(texture15, uv+vec2(2.5,-1.5)*duv, 0);
		if (val[2].x < compare -bias) shadow[4] = 0.0;
		if (val[2].y < compare -bias) shadow[5] = 0.0;
		if (val[2].w < compare -bias) shadow[10] = 0.0;
		if (val[2].z < compare -bias) shadow[11] = 0.0;
		
		val[3] = textureGather(texture15, uv+vec2(-1.5,.5)*duv, 0);
		if (val[3].x < compare -bias) shadow[12] = 0.0;
		if (val[3].y < compare -bias) shadow[13] = 0.0;
		if (val[3].w < compare -bias) shadow[18] = 0.0;
		if (val[3].z < compare -bias) shadow[19] = 0.0;
		val[4] = textureGather(texture15, uv+vec2(.5,.5)*vec2(duv.x,duv.y), 0);
		if (val[4].x < compare -bias) shadow[14] = 0.0;
		if (val[4].y < compare -bias) shadow[15] = 0.0;
		if (val[4].w < compare -bias) shadow[20] = 0.0;
		if (val[4].z < compare -bias) shadow[21] = 0.0;
		val[5] = textureGather(texture15, uv+vec2(2.5,.5)*vec2(duv.x,duv.y), 0);
		if (val[5].x < compare -bias) shadow[16] = 0.0;
		if (val[5].y < compare -bias) shadow[17] = 0.0;
		if (val[5].w < compare -bias) shadow[22] = 0.0;
		if (val[5].z < compare -bias) shadow[23] = 0.0;
		
		val[6] = textureGather(texture15, uv+vec2(-1.5,2.5)*vec2(duv.x,duv.y), 0);
		if (val[6].x < compare -bias) shadow[24] = 0.0;
		if (val[6].y < compare -bias) shadow[25] = 0.0;
		if (val[6].w < compare -bias) shadow[30] = 0.0;
		if (val[6].z < compare -bias) shadow[31] = 0.0;
		val[7] = textureGather(texture15, uv+vec2(.5,2.5)*vec2(duv.x,duv.y), 0);
		if (val[7].x < compare -bias) shadow[26] = 0.0;
		if (val[7].y < compare -bias) shadow[27] = 0.0;
		if (val[7].w < compare -bias) shadow[32] = 0.0;
		if (val[7].z < compare -bias) shadow[33] = 0.0;
		val[8] = textureGather(texture15, uv+vec2(2.5,2.5)*vec2(duv.x,duv.y), 0);
		if (val[8].x < compare -bias) shadow[28] = 0.0;
		if (val[8].y < compare -bias) shadow[29] = 0.0;
		if (val[8].w < compare -bias) shadow[34] = 0.0;
		if (val[8].z < compare -bias) shadow[35] = 0.0;


		highp vec2 frac = uv*vec2(4096,1024) - floor(uv*vec2(4096,1024));
		if ( int(floor(uv.x*4096)) < int(floor(uv.x*4096+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*1024)) < int(floor(uv.y*1024+1.0/512.0)) ) frac.y = 0.0;
		
		//float x0 = mix( shadow[3], shadow[0], frac.y);
		//float x1 = mix( shadow[2], shadow[1], frac.y);
		//ave = mix(x0,x1,frac.x);
		
		float ave[25];
		float y0, y1;
		
		for (int n = 0; n< 25; n++)
		{
			y0 = mix( shadow[n+(n/5)+6], shadow[n+(n/5)], frac.y);
			y1 = mix( shadow[n+(n/5)+7], shadow[n+(n/5)+1], frac.y);
			ave[n] = mix(y0, y1, frac.x);
		}
		
		
		float weight[3];
		weight[0] = 0.56888889;
		weight[1] = 0.47862867;
		weight[2] = 0.23692689;

		 
		float sum = 0;
		for (int w = -2; w<3; w++)
			for (int h = -2; h<3; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+2)+5*(h+2)];
		
		sum /= 4.0;
		


		return sum;//ave[12];
	}
	
	if (cascade == 1)
	{
		float shadow[16];
		for (int n = 0; n< 16; n++)
			shadow[n] = 1.0;
			
		
		highp float compare = (transformLight1.z + transformLight1.w)/2.0;
		float bias = .0008;	
			
		highp vec4 val[4];
		highp vec2 duv = 1.0/vec2(4096,-1024);
		val[0] = textureGather(texture15, uv+vec2(-.5,-.5)*duv, 0);
		if (val[0].x < compare -bias) shadow[0] = 0.0;
		if (val[0].y < compare -bias) shadow[1] = 0.0;
		if (val[0].w < compare -bias) shadow[4] = 0.0;
		if (val[0].z < compare -bias) shadow[5] = 0.0;
		val[1] = textureGather(texture15, uv+vec2(1.5,-.5)*duv, 0);
		if (val[1].x < compare -bias) shadow[2] = 0.0;
		if (val[1].y < compare -bias) shadow[3] = 0.0;
		if (val[1].w < compare -bias) shadow[6] = 0.0;
		if (val[1].z < compare -bias) shadow[7] = 0.0;

		val[2] = textureGather(texture15, uv+vec2(-.5,1.5)*duv, 0);
		if (val[2].x < compare -bias) shadow[8] = 0.0;
		if (val[2].y < compare -bias) shadow[9] = 0.0;
		if (val[2].w < compare -bias) shadow[12] = 0.0;
		if (val[2].z < compare -bias) shadow[13] = 0.0;
		val[3] = textureGather(texture15, uv+vec2(1.5,1.5)*vec2(duv.x,duv.y), 0);
		if (val[3].x < compare -bias) shadow[10] = 0.0;
		if (val[3].y < compare -bias) shadow[11] = 0.0;
		if (val[3].w < compare -bias) shadow[14] = 0.0;
		if (val[3].z < compare -bias) shadow[15] = 0.0;

		highp vec2 frac = uv*vec2(4096,1024) - floor(uv*vec2(4096,1024));
		if ( int(floor(uv.x*4096)) < int(floor(uv.x*4096+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*1024)) < int(floor(uv.y*1024+1.0/512.0)) ) frac.y = 0.0;
		
		//float x0 = mix( shadow[3], shadow[0], frac.y);
		//float x1 = mix( shadow[2], shadow[1], frac.y);
		//ave = mix(x0,x1,frac.x);
		
		float ave[9];
		float y0, y1;
		
		for (int n = 0; n< 9; n++)
		{
			y0 = mix( shadow[n+(n/3)+4], shadow[n+(n/3)], frac.y);
			y1 = mix( shadow[n+(n/3)+5], shadow[n+(n/3)+1], frac.y);
			ave[n] = mix(y0, y1, frac.x);
		}
		
		float weight[2];
		weight[0] = 0.8888889;
		weight[1] = 0.5555556;


		 
		float sum = 0;
		for (int w = -1; w<2; w++)
			for (int h = -1; h<2; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+1)+3*(h+1)];
		
		sum /= 4.0;
		return sum;
	}
	
	if (cascade == 2)
	{
		float shadow[16];
		for (int n = 0; n< 16; n++)
			shadow[n] = 1.0;
			
		
		highp float compare = (transformLight2.z + transformLight2.w)/2.0;
		float bias = .0016;	
			
		highp vec4 val[4];
		highp vec2 duv = 1.0/vec2(4096,-1024);
		val[0] = textureGather(texture15, uv+vec2(-.5,-.5)*duv, 0);
		if (val[0].x < compare -bias) shadow[0] = 0.0;
		if (val[0].y < compare -bias) shadow[1] = 0.0;
		if (val[0].w < compare -bias) shadow[4] = 0.0;
		if (val[0].z < compare -bias) shadow[5] = 0.0;
		val[1] = textureGather(texture15, uv+vec2(1.5,-.5)*duv, 0);
		if (val[1].x < compare -bias) shadow[2] = 0.0;
		if (val[1].y < compare -bias) shadow[3] = 0.0;
		if (val[1].w < compare -bias) shadow[6] = 0.0;
		if (val[1].z < compare -bias) shadow[7] = 0.0;

		val[2] = textureGather(texture15, uv+vec2(-.5,1.5)*duv, 0);
		if (val[2].x < compare -bias) shadow[8] = 0.0;
		if (val[2].y < compare -bias) shadow[9] = 0.0;
		if (val[2].w < compare -bias) shadow[12] = 0.0;
		if (val[2].z < compare -bias) shadow[13] = 0.0;
		val[3] = textureGather(texture15, uv+vec2(1.5,1.5)*vec2(duv.x,duv.y), 0);
		if (val[3].x < compare -bias) shadow[10] = 0.0;
		if (val[3].y < compare -bias) shadow[11] = 0.0;
		if (val[3].w < compare -bias) shadow[14] = 0.0;
		if (val[3].z < compare -bias) shadow[15] = 0.0;

		highp vec2 frac = uv*vec2(4096,1024) - floor(uv*vec2(4096,1024));
		if ( int(floor(uv.x*4096)) < int(floor(uv.x*4096+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*1024)) < int(floor(uv.y*1024+1.0/512.0)) ) frac.y = 0.0;
		
		//float x0 = mix( shadow[3], shadow[0], frac.y);
		//float x1 = mix( shadow[2], shadow[1], frac.y);
		//ave = mix(x0,x1,frac.x);
		
		float ave[9];
		float y0, y1;
		
		for (int n = 0; n< 9; n++)
		{
			y0 = mix( shadow[n+(n/3)+4], shadow[n+(n/3)], frac.y);
			y1 = mix( shadow[n+(n/3)+5], shadow[n+(n/3)+1], frac.y);
			ave[n] = mix(y0, y1, frac.x);
		}

		float weight[2];
		weight[0] = 0.8888889;
		weight[1] = 0.5555556;

		float sum = 0;
		for (int w = -1; w<2; w++)
			for (int h = -1; h<2; h++)
				sum += weight[abs(w)]*weight[abs(h)]*ave[(w+1)+3*(h+1)];
		
		sum /= 4.0;
		return sum;
	}
	
	if (cascade == 3)
	{
		float shadow[4];
		for (int n = 0; n< 4; n++)
			shadow[n] = 1.0;
			
		highp float compare = (transformLight3.z + transformLight3.w)/2.0;
		float bias = .0032;	
			
		highp vec4 val[1];
		highp vec2 duv = 1.0/vec2(4096,-1024);
		val[0] = textureGather(texture15, uv+vec2(.5,.5)*duv, 0);
		if (val[0].x < compare -bias) shadow[0] = 0.0;
		if (val[0].y < compare -bias) shadow[1] = 0.0;
		if (val[0].w < compare -bias) shadow[2] = 0.0;
		if (val[0].z < compare -bias) shadow[3] = 0.0;

		highp vec2 frac = uv*vec2(4096,1024) - floor(uv*vec2(4096,1024));
		if ( int(floor(uv.x*4096)) < int(floor(uv.x*4096+1.0/512.0)) ) frac.x = 0.0;
		if ( int(floor(uv.y*1024)) < int(floor(uv.y*1024+1.0/512.0)) ) frac.y = 0.0;
		
		float ave;
		float y0, y1;
		
		 y0 = mix( shadow[2], shadow[0], frac.y);
		 y1 = mix( shadow[3], shadow[1], frac.y);
		 ave = mix(y0, y1, frac.x);
		
		return ave;
	}
}


highp float snoise(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	if (posVarying.y < reflectHeight) discard;
	
	vec4 tex = textureCubic(texture0, uvVarying*tile.xy);
	
	//float shadow = 1.0;
	float dist0 = length(posVarying-cascadeCenter0);
	
	//shadow = shadowSample(.5*(1+transformLight3.xy)/vec2(4,1)+vec2(.75,0), 3);
	
	float facing = abs( dot( normalize(campos-posVarying), normalVarying ));
	facing = min(1.0,2.0*facing*facing);
	
	if (samples > 1.0)
		tex.a *= 1.0+textureQueryLod(texture0, uvVarying*tile.xy).x * (2.0/samples);
	
	
	if (tex.a*facing <.0625) discard;
	if (samples < 1.0) tex.a = 1.0;
	
	color = vcolor*tex;

	
	float noise = 0.0;
	if (samples > 0.0)
		noise = snoise(uvVarying+gl_FragCoord.xy+.01*time)/(4*samples);

	color.a =  min(1.0, floor((samples+1)*(color.a*facing+noise))/ max(1.0,samples));
	
	float gi = 0.5;
	color.rgb *= .5*gi+.5*max(0,shadow);
	
	float nu = min(1.0,max(0.0,shadow));
	if (nu<=.25) nu=0.0;
	if (nu>=.75) nu=1.0;
	if (nu>.25 && nu<.75) nu = 2.0*(nu-.25);
	float foo = mix(0, 1, -2*pow(nu,3)+3*pow(nu,2));
	color = vec4(vec3(.5*foo+.5)*vcolor.rgb, color.a);
	
	float ambient = 0.0;
	if (lightVarying.r > ambient) ambient = lightVarying.r;
	if (lightVarying.g > ambient) ambient = lightVarying.g;
	if (lightVarying.b > ambient) ambient = lightVarying.b;
	
	if (GI.x < .5)
	{
		color = vec4( (.5+.5*foo)*vcolor.rgb, color.a);
	}
	else
	{
		nu = max(0.0,foo);
		color = vec4((.5*vec3(foo)+lightVarying)*vcolor.rgb, color.a);

	}
	
	if (GI.w >.5)
		color = vec4(foo*vcolor.rgb,1);
		
	//color = vec4(lightVarying,color.a);
	//color = vec4(vec3(facing),1);
}